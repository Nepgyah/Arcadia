# Generated by Django 5.2.1 on 2025-08-16 14:07

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Chipset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='GPUMemoryType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='MemoryType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Microarchitecture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Socket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='GPU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('color', models.IntegerField(blank=True, choices=[(0, 'Other'), (1, 'Black'), (2, 'Silver'), (3, 'White'), (4, 'Red'), (5, 'Blue'), (6, 'Yellow'), (7, 'Green')], null=True)),
                ('msrp', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('core_clock', models.IntegerField(help_text='MHz')),
                ('boost_clock', models.IntegerField(help_text='MHz')),
                ('vram', models.IntegerField()),
                ('memory_clock', models.IntegerField(blank=True, help_text='MHz', null=True)),
                ('memory_bus', models.IntegerField(blank=True, help_text='bits', null=True)),
                ('length', models.IntegerField(blank=True, help_text='mm', null=True)),
                ('tdp', models.IntegerField(blank=True, help_text='Watts', null=True)),
                ('suggested_psu', models.IntegerField(blank=True, help_text='Watts', null=True)),
                ('slot_width', models.IntegerField(choices=[(1, 'Single-slot'), (2, 'Dual-slot'), (3, 'Triple-slot'), (4, 'Quadruple-slot')], default=2)),
                ('dvi_port_count', models.IntegerField(default=0)),
                ('hdmi_port_count', models.IntegerField(default=0)),
                ('dp_port_count', models.IntegerField(default=0)),
                ('memory_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='kumitateru.gpumemorytype')),
                ('manufacturer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='kumitateru.manufacturer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PSU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('color', models.IntegerField(blank=True, choices=[(0, 'Other'), (1, 'Black'), (2, 'Silver'), (3, 'White'), (4, 'Red'), (5, 'Blue'), (6, 'Yellow'), (7, 'Green')], null=True)),
                ('msrp', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('wattage', models.IntegerField()),
                ('efficiency', models.IntegerField(choices=[(1, 'Bronze'), (2, 'Silver'), (3, 'Gold'), (4, 'Platinum')], default=1, help_text='Defaults to bronze')),
                ('type', models.IntegerField(choices=[(1, 'ATX'), (2, 'SFX')], default=1, help_text='Defaults to ATX')),
                ('is_modular', models.BooleanField()),
                ('has_zero_rpm', models.BooleanField()),
                ('weight', models.FloatField(blank=True, help_text='kg', null=True)),
                ('length', models.IntegerField(blank=True, help_text='mm', null=True)),
                ('width', models.IntegerField(blank=True, help_text='mm', null=True)),
                ('height', models.IntegerField(blank=True, help_text='mm', null=True)),
                ('connector_atx_24_pin_count', models.BooleanField(default=0, help_text='Always included for motherboard power')),
                ('connector_eps_8_pin_count', models.IntegerField(default=0, help_text='8-pin EPS (CPU power) connectors')),
                ('connector_eps_4_pin_count', models.IntegerField(default=0, help_text='4-pin EPS (CPU power) connectors')),
                ('connector_pcie_6_pin_count', models.IntegerField(default=0, help_text='6-pin PCIe connectors')),
                ('connector_pcie_6_2_pin_count', models.IntegerField(default=0, help_text='6+2-pin PCIe connectors')),
                ('connector_pcie_8_pin_count', models.IntegerField(default=0, help_text='Dedicated 8-pin PCIe connectors (rare)')),
                ('connector_12vhpwr_count', models.IntegerField(default=0, help_text='12VHPWR 16-pin connectors for PCIe Gen 5 GPUs')),
                ('connector_sata_count', models.IntegerField(default=0, help_text='SATA power connectors')),
                ('connector_molex_4_pin_count', models.IntegerField(default=0, help_text='4-pin Molex connectors')),
                ('connector_floppy_count', models.IntegerField(default=0, help_text='Floppy/Berg connectors (legacy)')),
                ('manufacturer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='kumitateru.manufacturer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RAM',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('color', models.IntegerField(blank=True, choices=[(0, 'Other'), (1, 'Black'), (2, 'Silver'), (3, 'White'), (4, 'Red'), (5, 'Blue'), (6, 'Yellow'), (7, 'Green')], null=True)),
                ('msrp', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('capacity', models.IntegerField(blank=True, null=True)),
                ('modules', models.IntegerField(default=1, help_text='Number of sticks/modules')),
                ('speed', models.IntegerField(blank=True, help_text='MHz', null=True)),
                ('has_heat_spreader', models.BooleanField(default=False)),
                ('tested_voltage', models.FloatField(default=1.0)),
                ('manufacturer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='kumitateru.manufacturer')),
                ('memory_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='kumitateru.memorytype')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Motherboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('color', models.IntegerField(blank=True, choices=[(0, 'Other'), (1, 'Black'), (2, 'Silver'), (3, 'White'), (4, 'Red'), (5, 'Blue'), (6, 'Yellow'), (7, 'Green')], null=True)),
                ('msrp', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('form_factor', models.IntegerField(choices=[(0, 'Mini-ITX'), (1, 'Micro-ATX'), (2, 'ATX'), (3, 'eATX')], default=2)),
                ('memory_slots', models.IntegerField(default=1)),
                ('max_memory', models.IntegerField(default=1, help_text='GB')),
                ('pcie_x16_slots', models.IntegerField(default=0)),
                ('pcie_x1_slots', models.IntegerField(default=0)),
                ('m2_slots', models.IntegerField(default=0)),
                ('sata_slots', models.IntegerField(default=0)),
                ('usb_2_headers', models.IntegerField(default=0)),
                ('usb_3_headers', models.IntegerField(default=0)),
                ('does_support_raid', models.BooleanField(default=False)),
                ('does_support_ecc', models.BooleanField(default=False)),
                ('does_support_multi_gpu', models.BooleanField(default=False)),
                ('does_support_ethernet', models.BooleanField(default=False)),
                ('chipset', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='kumitateru.chipset')),
                ('manufacturer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='kumitateru.manufacturer')),
                ('memory_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='kumitateru.memorytype')),
                ('socket_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='kumitateru.socket')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CPUCooler',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('color', models.IntegerField(blank=True, choices=[(0, 'Other'), (1, 'Black'), (2, 'Silver'), (3, 'White'), (4, 'Red'), (5, 'Blue'), (6, 'Yellow'), (7, 'Green')], null=True)),
                ('msrp', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('type', models.IntegerField(choices=[(0, 'Water - AIO'), (1, 'Air - Single Tower'), (2, 'Air - Dual Tower')], default=1)),
                ('height', models.IntegerField(blank=True, help_text='mm', null=True)),
                ('has_fans', models.BooleanField()),
                ('radiator_size', models.IntegerField(blank=True, help_text='mm', null=True)),
                ('manufacturer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='kumitateru.manufacturer')),
                ('supported_sockets', models.ManyToManyField(related_name='compatible_coolers', to='kumitateru.socket')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CPU',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('color', models.IntegerField(blank=True, choices=[(0, 'Other'), (1, 'Black'), (2, 'Silver'), (3, 'White'), (4, 'Red'), (5, 'Blue'), (6, 'Yellow'), (7, 'Green')], null=True)),
                ('msrp', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('core_count', models.IntegerField()),
                ('thread_count', models.IntegerField()),
                ('core_clock', models.FloatField(help_text='GHz')),
                ('boost_clock', models.FloatField(help_text='GHz')),
                ('l2_cache', models.IntegerField(blank=True, help_text='MB', null=True)),
                ('l3_cache', models.IntegerField(blank=True, help_text='MB', null=True)),
                ('tdp', models.IntegerField(help_text='Watts')),
                ('max_temp', models.IntegerField(blank=True, help_text='Celcius', null=True)),
                ('is_unlocked', models.BooleanField(help_text='Overclockable')),
                ('has_graphics', models.BooleanField()),
                ('manufacturer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='kumitateru.manufacturer')),
                ('microarchitecture', models.ForeignKey(blank=True, help_text='Codename', null=True, on_delete=django.db.models.deletion.SET_NULL, to='kumitateru.microarchitecture')),
                ('socket_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='kumitateru.socket')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
